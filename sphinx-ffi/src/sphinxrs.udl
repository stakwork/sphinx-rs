[Error]
enum SphinxError {
  "DerivePublicKey",
  "DeriveSharedSecret",
  "Encrypt",
  "Decrypt",
  "BadPubkey",
  "BadSecret",
  "BadNonce",
  "BadCiper",
  "InvalidNetwork",
  "BadRequest",
  "BadResponse",
  "BadArgs",
  "BadState",
  "InitFailed",
  "LssFailed",
  "VlsFailed",
};

dictionary Keys {
    string secret;
    string pubkey;
};

dictionary VlsResponse {
    string topic;
    bytes? vls_bytes;
    bytes? lss_bytes;
};

namespace sphinxrs {
  [Throws=SphinxError]
  string pubkey_from_secret_key(string my_secret_key);
  [Throws=SphinxError]
  string derive_shared_secret(string their_pubkey, string my_secret_key);
  [Throws=SphinxError]
  string encrypt(string plaintext, string secret, string nonce);
  [Throws=SphinxError]
  string decrypt(string ciphertext, string secret);
  [Throws=SphinxError]
  Keys node_keys(string net, string seed);
  [Throws=SphinxError]
  string mnemonic_from_entropy(string seed);
  [Throws=SphinxError]
  string entropy_from_mnemonic(string mnemonic);
  [Throws=SphinxError]
  string build_request(string msg, string secret, u64 nonce);
  [Throws=SphinxError]
  string parse_response(string res);
  [Throws=SphinxError]
  VlsResponse run_init_1(string args, bytes state, bytes msg1);
  [Throws=SphinxError]
  VlsResponse run_init_2(string args, bytes state, bytes msg1, bytes msg2);
  [Throws=SphinxError]
  VlsResponse run_vls(string args, bytes state, bytes msg1, bytes msg2, bytes vls_msg);
  [Throws=SphinxError]
  VlsResponse run_lss(string args, bytes state, bytes msg1, bytes msg2, bytes lss_msg, bytes prev_vls, bytes prev_lss);
  [Throws=SphinxError]
  string make_auth_token(u32 ts, string secret);
};