[Error]
interface SphinxError {
  DerivePublicKey(string r);
  DeriveSharedSecret(string r);
  Encrypt(string r);
  Decrypt(string r);
  BadPubkey(string r);
  BadSecret(string r);
  BadNonce(string r);
  BadCiper(string r);
  InvalidNetwork(string r);
  BadRequest(string r);
  BadResponse(string r);
  BadTopic(string r);
  BadArgs(string r);
  BadState(string r);
  BadVelocity(string r);
  InitFailed(string r);
  LssFailed(string r);
  VlsFailed(string r);
};

dictionary Keys {
    string secret;
    string pubkey;
};

dictionary VlsResponse {
    string topic;
    bytes bytes;
    u16 sequence;
    string cmd;
    bytes state;
};

namespace sphinxrs {
  [Throws=SphinxError]
  string pubkey_from_secret_key(string my_secret_key);
  [Throws=SphinxError]
  string derive_shared_secret(string their_pubkey, string my_secret_key);
  [Throws=SphinxError]
  string encrypt(string plaintext, string secret, string nonce);
  [Throws=SphinxError]
  string decrypt(string ciphertext, string secret);
  [Throws=SphinxError]
  Keys node_keys(string net, string seed);
  [Throws=SphinxError]
  string mnemonic_from_entropy(string seed);
  [Throws=SphinxError]
  string entropy_from_mnemonic(string mnemonic);
  [Throws=SphinxError]
  string build_request(string msg, string secret, u64 nonce);
  [Throws=SphinxError]
  string parse_response(string res);
  [Throws=SphinxError]
  string make_auth_token(u32 ts, string secret);
  [Throws=SphinxError]
  VlsResponse run(string topic, string args, bytes state, bytes msg1, u16? expected_sequence);
};