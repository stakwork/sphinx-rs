[Error]
interface SphinxError {
  DerivePublicKey(string r);
  DeriveSharedSecret(string r);
  Encrypt(string r);
  Decrypt(string r);
  BadPubkey(string r);
  BadSecret(string r);
  BadNonce(string r);
  BadCiper(string r);
  InvalidNetwork(string r);
  BadRequest(string r);
  BadResponse(string r);
  BadTopic(string r);
  BadArgs(string r);
  BadState(string r);
  BadVelocity(string r);
  InitFailed(string r);
  LssFailed(string r);
  VlsFailed(string r);
  BadChildIndex(string r);
  BadMsg(string r);
  AddContactFailed(string r);
  GetContactFailed(string r);
  HandleFailed(string r);
  FetchMsgsFailed(string r);
  SendFailed(string r);
  SetNetworkFailed(string r);
  SetBlockheightFailed(string r);
};

dictionary Keys {
    string secret;
    string pubkey;
};

dictionary VlsResponse {
    string topic;
    bytes bytes;
    u16 sequence;
    string cmd;
    bytes state;
};

dictionary RunReturn {
    string? new_subscription;
    string? topic_0;
    bytes? payload_0;
    string? topic_1;
    bytes? payload_1;
    string? topic_2;
    bytes? payload_2;
    bytes? state_mp;
    string? msg;
    u8? msg_type;
    string? msg_uuid;
    string? msg_index;
    string? msg_sender;
    u64? msg_msat;
    u64? msg_timestamp;
    u64? new_balance;
    string? my_contact_info;
    string? sent_status;
    string? sent_to;
    string? settled_status;
    string? error;
    string? new_tribe;
    string? tribe_members;
    string? new_invite;
    string? inviter_contact_info;
    string? lsp_host;
};

namespace sphinxrs {
  [Throws=SphinxError]
  string pubkey_from_secret_key(string my_secret_key);
  [Throws=SphinxError]
  string derive_shared_secret(string their_pubkey, string my_secret_key);
  [Throws=SphinxError]
  string encrypt(string plaintext, string secret, string nonce);
  [Throws=SphinxError]
  string decrypt(string ciphertext, string secret);
  [Throws=SphinxError]
  Keys node_keys(string net, string seed);
  [Throws=SphinxError]
  string mnemonic_from_entropy(string entropy);
  [Throws=SphinxError]
  string entropy_from_mnemonic(string mnemonic);
  [Throws=SphinxError]
  string mnemonic_to_seed(string mnemonic);
  [Throws=SphinxError]
  string entropy_to_seed(string entropy);
  [Throws=SphinxError]
  string build_request(string msg, string secret, u64 nonce);
  [Throws=SphinxError]
  string parse_response(string res);
  [Throws=SphinxError]
  string make_auth_token(u32 ts, string secret);
  [Throws=SphinxError]
  VlsResponse run(string topic, string args, bytes state, bytes msg1, u16? expected_sequence);
  string sha_256(bytes msg);
  [Throws=SphinxError]
  bytes create_onion(string seed, u64 idx, string time, string network, string hops, bytes payload);
  [Throws=SphinxError]
  bytes create_onion_msg(string seed, u64 idx, string time, string network, string hops, string json);
  [Throws=SphinxError]
  bytes create_keysend(string seed, u64 idx, string time, string network, string hops, u64 msat, string rhash, bytes payload, u32 curr_height, string preimage);
  [Throws=SphinxError]
  bytes create_keysend_msg(string seed, u64 idx, string time, string network, string hops, u64 msat, string rhash, string msg_json, u32 curr_height, string preimage);
  [Throws=SphinxError]
  bytes peel_onion(string seed, u64 idx, string time, string network, bytes payload);
  [Throws=SphinxError]
  string peel_onion_msg(string seed, u64 idx, string time, string network, bytes payload);
  [Throws=SphinxError]
  bytes peel_payment(string seed, u64 idx, string time, string network, bytes payload, string rhash, u32 cur_height, u32 cltv_expiry);
  [Throws=SphinxError]
  string peel_payment_msg(string seed, u64 idx, string time, string network, bytes payload, string rhash, u32 cur_height, u32 cltv_expiry);
  [Throws=SphinxError]
  string sign_ms(string seed, u64 idx, string time, string network);
  [Throws=SphinxError]
  string sign_bytes(string seed, u64 idx, string time, string network, bytes msg);
  [Throws=SphinxError]
  string pubkey_from_seed(string seed, u64 idx, string time, string network);
  [Throws=SphinxError]
  string root_sign_ms(string seed, string time, string network);
  [Throws=SphinxError]
  string xpub_from_seed(string seed, string time, string network);
  [Throws=SphinxError]
  RunReturn set_network(string network);
  [Throws=SphinxError]
  RunReturn set_blockheight(u32 blockheight);
  [Throws=SphinxError]
  RunReturn add_contact(string seed, string unique_time, bytes state, string to_pubkey, string route_hint, string my_alias, string my_img, u64 amt_msat);
  [Throws=SphinxError]
  string get_contact(bytes state, string pubkey);
  [Throws=SphinxError]
  string list_contacts(bytes state);
  [Throws=SphinxError]
  string get_subscription_topic(string seed, string unique_time, bytes state);
  [Throws=SphinxError]
  RunReturn initial_setup(string seed, string unique_time, bytes state);
  [Throws=SphinxError]
  RunReturn fetch_msgs(string seed, string unique_time, bytes state, u64 last_msg_idx, u32? limit);
  [Throws=SphinxError]
  RunReturn handle(string topic, bytes payload, string seed, string unique_time, bytes state, string my_alias, string my_img);
  [Throws=SphinxError]
  RunReturn send(string seed, string unique_time, string to, u8 msg_type, string msg_json, bytes state, string my_alias, string my_img, u64 amt_msat, optional boolean is_tribe = false);
  [Throws=SphinxError]
  string make_media_token(string seed, string unique_time, bytes state, string host, string muid, string to, u32 expiry);
  [Throws=SphinxError]
  string make_media_token_with_meta(string seed, string unique_time, bytes state, string host, string muid, string to, u32 expiry, string meta);
  [Throws=SphinxError]
  string make_media_token_with_price(string seed, string unique_time, bytes state, string host, string muid, string to, u32 expiry, u64 price);
  [Throws=SphinxError]
  string make_invoice(string seed, string unique_time, bytes state, u64 amt_msat, string preimage, string description);
  [Throws=SphinxError]
  RunReturn create_tribe(string seed, string unique_time, bytes state, string tribe_server_pubkey, string tribe_json);
  [Throws=SphinxError]
  RunReturn join_tribe(string seed, string unique_time, bytes state, string tribe_pubkey, string tribe_route_hint, string alias, u64 amt_msat);
  [Throws=SphinxError]
  RunReturn list_tribe_members(string seed, string unique_time, bytes state, string tribe_server_pubkey, string tribe_pubkey);
  [Throws=SphinxError]
  RunReturn make_invite(string seed, string unique_time, bytes state, string host, u64 amt_msat);
  [Throws=SphinxError]
  RunReturn process_invite(string seed, string unique_time, bytes state, string invite_qr);
};