// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(crypterFFI)
import crypterFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_crypter_5b86_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_crypter_5b86_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
fileprivate class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        self.offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset..<offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        let _ = withUnsafeMutableBytes(of: &value, { data.copyBytes(to: $0, from: range)})
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> Array<UInt8> {
        let range = offset..<(offset+count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer({ buffer in
            data.copyBytes(to: buffer, from: range)
        })
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
fileprivate class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        self.bytes = []
        self.offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: Writer)
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    static func lift(_ buf: RustBuffer) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    static func lower(_ value: SwiftType) -> RustBuffer {
          let writer = Writer()
          write(value, into: writer)
          return RustBuffer(bytes: writer.bytes)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    static func read(from buf: Reader) throws -> UInt64 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    static func read(from buf: Reader) throws -> String {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    static func write(_ value: String, into buf: Writer) {
        let len = Int32(value.utf8.count)
        buf.writeInt(len)
        buf.writeBytes(value.utf8)
    }
}


public struct Keys {
    public var secret: String
    public var pubkey: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(secret: String, pubkey: String) {
        self.secret = secret
        self.pubkey = pubkey
    }
}


extension Keys: Equatable, Hashable {
    public static func ==(lhs: Keys, rhs: Keys) -> Bool {
        if lhs.secret != rhs.secret {
            return false
        }
        if lhs.pubkey != rhs.pubkey {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(secret)
        hasher.combine(pubkey)
    }
}


fileprivate struct FfiConverterTypeKeys: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> Keys {
        return try Keys(
            secret: FfiConverterString.read(from: buf), 
            pubkey: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: Keys, into buf: Writer) {
        FfiConverterString.write(value.secret, into: buf)
        FfiConverterString.write(value.pubkey, into: buf)
    }
}


public struct Policy {
    public var satLimit: UInt64
    public var interval: String
    public var htlcLimit: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(satLimit: UInt64, interval: String, htlcLimit: UInt64) {
        self.satLimit = satLimit
        self.interval = interval
        self.htlcLimit = htlcLimit
    }
}


extension Policy: Equatable, Hashable {
    public static func ==(lhs: Policy, rhs: Policy) -> Bool {
        if lhs.satLimit != rhs.satLimit {
            return false
        }
        if lhs.interval != rhs.interval {
            return false
        }
        if lhs.htlcLimit != rhs.htlcLimit {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(satLimit)
        hasher.combine(interval)
        hasher.combine(htlcLimit)
    }
}


fileprivate struct FfiConverterTypePolicy: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> Policy {
        return try Policy(
            satLimit: FfiConverterUInt64.read(from: buf), 
            interval: FfiConverterString.read(from: buf), 
            htlcLimit: FfiConverterUInt64.read(from: buf)
        )
    }

    fileprivate static func write(_ value: Policy, into buf: Writer) {
        FfiConverterUInt64.write(value.satLimit, into: buf)
        FfiConverterString.write(value.interval, into: buf)
        FfiConverterUInt64.write(value.htlcLimit, into: buf)
    }
}


public enum CrypterError {

    
    
    // Simple error enums only carry a message
    case DerivePublicKey(message: String)
    
    // Simple error enums only carry a message
    case DeriveSharedSecret(message: String)
    
    // Simple error enums only carry a message
    case Encrypt(message: String)
    
    // Simple error enums only carry a message
    case Decrypt(message: String)
    
    // Simple error enums only carry a message
    case BadPubkey(message: String)
    
    // Simple error enums only carry a message
    case BadSecret(message: String)
    
    // Simple error enums only carry a message
    case BadNonce(message: String)
    
    // Simple error enums only carry a message
    case BadCiper(message: String)
    
    // Simple error enums only carry a message
    case InvalidNetwork(message: String)
    
    // Simple error enums only carry a message
    case BadRequest(message: String)
    
    // Simple error enums only carry a message
    case BadResponse(message: String)
    
}

fileprivate struct FfiConverterTypeCrypterError: FfiConverterRustBuffer {
    typealias SwiftType = CrypterError

    static func read(from buf: Reader) throws -> CrypterError {
        let variant: Int32 = try buf.readInt()
        switch variant {

        

        
        case 1: return .DerivePublicKey(
            message: try FfiConverterString.read(from: buf)
        )
        
        case 2: return .DeriveSharedSecret(
            message: try FfiConverterString.read(from: buf)
        )
        
        case 3: return .Encrypt(
            message: try FfiConverterString.read(from: buf)
        )
        
        case 4: return .Decrypt(
            message: try FfiConverterString.read(from: buf)
        )
        
        case 5: return .BadPubkey(
            message: try FfiConverterString.read(from: buf)
        )
        
        case 6: return .BadSecret(
            message: try FfiConverterString.read(from: buf)
        )
        
        case 7: return .BadNonce(
            message: try FfiConverterString.read(from: buf)
        )
        
        case 8: return .BadCiper(
            message: try FfiConverterString.read(from: buf)
        )
        
        case 9: return .InvalidNetwork(
            message: try FfiConverterString.read(from: buf)
        )
        
        case 10: return .BadRequest(
            message: try FfiConverterString.read(from: buf)
        )
        
        case 11: return .BadResponse(
            message: try FfiConverterString.read(from: buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: CrypterError, into buf: Writer) {
        switch value {

        

        
        case let .DerivePublicKey(message):
            buf.writeInt(Int32(1))
            FfiConverterString.write(message, into: buf)
        case let .DeriveSharedSecret(message):
            buf.writeInt(Int32(2))
            FfiConverterString.write(message, into: buf)
        case let .Encrypt(message):
            buf.writeInt(Int32(3))
            FfiConverterString.write(message, into: buf)
        case let .Decrypt(message):
            buf.writeInt(Int32(4))
            FfiConverterString.write(message, into: buf)
        case let .BadPubkey(message):
            buf.writeInt(Int32(5))
            FfiConverterString.write(message, into: buf)
        case let .BadSecret(message):
            buf.writeInt(Int32(6))
            FfiConverterString.write(message, into: buf)
        case let .BadNonce(message):
            buf.writeInt(Int32(7))
            FfiConverterString.write(message, into: buf)
        case let .BadCiper(message):
            buf.writeInt(Int32(8))
            FfiConverterString.write(message, into: buf)
        case let .InvalidNetwork(message):
            buf.writeInt(Int32(9))
            FfiConverterString.write(message, into: buf)
        case let .BadRequest(message):
            buf.writeInt(Int32(10))
            FfiConverterString.write(message, into: buf)
        case let .BadResponse(message):
            buf.writeInt(Int32(11))
            FfiConverterString.write(message, into: buf)

        
        }
    }
}


extension CrypterError: Equatable, Hashable {}

extension CrypterError: Error { }

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    static func write(_ value: [String], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterString.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [String] {
        let len: Int32 = try buf.readInt()
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: buf))
        }
        return seq
    }
}

public func pubkeyFromSecretKey(mySecretKey: String) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_pubkey_from_secret_key(
        FfiConverterString.lower(mySecretKey), $0)
}
    )
}



public func deriveSharedSecret(theirPubkey: String, mySecretKey: String) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_derive_shared_secret(
        FfiConverterString.lower(theirPubkey), 
        FfiConverterString.lower(mySecretKey), $0)
}
    )
}



public func encrypt(plaintext: String, secret: String, nonce: String) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_encrypt(
        FfiConverterString.lower(plaintext), 
        FfiConverterString.lower(secret), 
        FfiConverterString.lower(nonce), $0)
}
    )
}



public func decrypt(ciphertext: String, secret: String) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_decrypt(
        FfiConverterString.lower(ciphertext), 
        FfiConverterString.lower(secret), $0)
}
    )
}



public func nodeKeys(net: String, seed: String) throws -> Keys {
    return try FfiConverterTypeKeys.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_node_keys(
        FfiConverterString.lower(net), 
        FfiConverterString.lower(seed), $0)
}
    )
}



public func mnemonicFromEntropy(seed: String) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_mnemonic_from_entropy(
        FfiConverterString.lower(seed), $0)
}
    )
}



public func entropyFromMnemonic(mnemonic: String) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_entropy_from_mnemonic(
        FfiConverterString.lower(mnemonic), $0)
}
    )
}



public func getNonceRequest(secret: String, nonce: UInt64) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_get_nonce_request(
        FfiConverterString.lower(secret), 
        FfiConverterUInt64.lower(nonce), $0)
}
    )
}



public func getNonceResponse(bytes: String) throws -> UInt64 {
    return try FfiConverterUInt64.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_get_nonce_response(
        FfiConverterString.lower(bytes), $0)
}
    )
}



public func resetWifiRequest(secret: String, nonce: UInt64) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_reset_wifi_request(
        FfiConverterString.lower(secret), 
        FfiConverterUInt64.lower(nonce), $0)
}
    )
}

public func resetWifiResponse(bytes: String) throws {
    try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_reset_wifi_response(
        FfiConverterString.lower(bytes), $0)
}
}


public func resetKeysRequest(secret: String, nonce: UInt64) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_reset_keys_request(
        FfiConverterString.lower(secret), 
        FfiConverterUInt64.lower(nonce), $0)
}
    )
}

public func resetKeysResponse(bytes: String) throws {
    try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_reset_keys_response(
        FfiConverterString.lower(bytes), $0)
}
}


public func resetAllRequest(secret: String, nonce: UInt64) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_reset_all_request(
        FfiConverterString.lower(secret), 
        FfiConverterUInt64.lower(nonce), $0)
}
    )
}

public func resetAllResponse(bytes: String) throws {
    try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_reset_all_response(
        FfiConverterString.lower(bytes), $0)
}
}


public func getPolicyRequest(secret: String, nonce: UInt64) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_get_policy_request(
        FfiConverterString.lower(secret), 
        FfiConverterUInt64.lower(nonce), $0)
}
    )
}



public func getPolicyResponse(bytes: String) throws -> Policy {
    return try FfiConverterTypePolicy.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_get_policy_response(
        FfiConverterString.lower(bytes), $0)
}
    )
}



public func updatePolicyRequest(secret: String, nonce: UInt64, policy: Policy) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_update_policy_request(
        FfiConverterString.lower(secret), 
        FfiConverterUInt64.lower(nonce), 
        FfiConverterTypePolicy.lower(policy), $0)
}
    )
}



public func updatePolicyResponse(bytes: String) throws -> Policy {
    return try FfiConverterTypePolicy.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_update_policy_response(
        FfiConverterString.lower(bytes), $0)
}
    )
}



public func getAllowlistRequest(secret: String, nonce: UInt64) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_get_allowlist_request(
        FfiConverterString.lower(secret), 
        FfiConverterUInt64.lower(nonce), $0)
}
    )
}



public func getAllowlistResponse(bytes: String) throws -> [String] {
    return try FfiConverterSequenceString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_get_allowlist_response(
        FfiConverterString.lower(bytes), $0)
}
    )
}



public func updateAllowlistRequest(secret: String, nonce: UInt64, allowlist: [String]) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_update_allowlist_request(
        FfiConverterString.lower(secret), 
        FfiConverterUInt64.lower(nonce), 
        FfiConverterSequenceString.lower(allowlist), $0)
}
    )
}



public func updateAllowlistResponse(bytes: String) throws -> [String] {
    return try FfiConverterSequenceString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_update_allowlist_response(
        FfiConverterString.lower(bytes), $0)
}
    )
}



public func otaRequest(secret: String, nonce: UInt64, version: UInt64, url: String) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_ota_request(
        FfiConverterString.lower(secret), 
        FfiConverterUInt64.lower(nonce), 
        FfiConverterUInt64.lower(version), 
        FfiConverterString.lower(url), $0)
}
    )
}



public func otaResponse(bytes: String) throws -> UInt64 {
    return try FfiConverterUInt64.lift(
        try
    
    rustCallWithError(FfiConverterTypeCrypterError.self) {
    
    crypter_5b86_ota_response(
        FfiConverterString.lower(bytes), $0)
}
    )
}



/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum CrypterLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
    }
}